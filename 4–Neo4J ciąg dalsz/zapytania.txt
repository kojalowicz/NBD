1. 
MATCH shortestPath = shortestPath((Darjeeling:town {name:"Darjeeling"})-[*]->(Sandakphu:peak {name:"Sandakphu"}))
RETURN shortestPath

2. 
MATCH (Darjeeling:town {name:"Darjeeling"}),(Sandakphu:peak {name:"Sandakphu"}), path = shortestPath((Darjeeling)-[*]->(Sandakphu))
WITH path, relationships(path) AS relation
WHERE ALL (r in relation WHERE r.winter = "true")
RETURN path, relation

3a.
MATCH p = (source:town {name: "Darjeeling"})-[r*]->(target:peak {name: "Sandakphu"})
UNWIND r as rel
WITH p, COLLECT(rel.distance) AS distances
WITH p, reduce(acc = 0, d in distances | acc + d) as distance
RETURN p, distance
ORDER BY distance ASC

3b.
MATCH p = (source:town {name: "Darjeeling"})-[r:twowheeler*]->(target)
WHERE ALL (r IN relationships(p) WHERE r.summer = "true")
RETURN target

4.
MATCH (a:Airport)<-[:ORIGIN]-(f:Flight)
WITH a, count(f) as loty
RETURN a, loty
ORDER BY loty ASC

5.
MATCH p = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport)
WHERE REDUCE(acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] |
  acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
  ) < 3000
RETURN p

6.
MATCH p = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport {name: "DAY"})
WITH p, REDUCE(acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] |
  acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
  ) as price
RETURN p, price
ORDER BY price desc

7. 
MATCH p = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport {name: "DAY"})
WITH p, REDUCE(acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] |
  acc + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]
  ) as price
RETURN p, price
ORDER BY price asc LIMIT 1

8.
MATCH p = (origin:Airport { name:"LAX" })<-[r1:ORIGIN]-(:Flight)-[r2:ORIGIN|DESTINATION*..10]->(destination:Airport {name: "DAY"})
WITH p, REDUCE(acc = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] |
  acc + [(n)<-[:ASSIGN]-(ticket {class: 'business'}) | ticket.price][0]
  ) as price
RETURN p, price
ORDER BY price asc LIMIT 1

9. 
MATCH (airport1:Airport)<-[:ORIGIN]-(flight:Flight) 
MATCH (airport2:Airport)<-[:DESTINATION]-(flight:Flight) 
UNWIND [airport1, airport2] as connection
RETURN flight.airline AS airline, count(distinct connection) AS numberOfConnections
ORDER BY numberOfConnections DESC

10. 
MATCH path = (airport1:Airport)<-[relation1:ORIGIN]-(flight1:Flight)-[relation2:DESTINATION]->(airport2:Airport)<-[relation3:ORIGIN]-(flight2:Flight)-[relation4:DESTINATION]->(airport3:Airport)
WHERE NOT(airport1 = airport2) AND NOT(airport1 = airport3) AND NOT(airport2 = airport3)
WITH path, REDUCE(start = 0, n IN [x IN NODES(path) WHERE 'Flight' IN LABELS(x)] | start + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) AS ticketPrice
RETURN path, ticketPrice
ORDER BY ticketPrice ASC LIMIT 1

